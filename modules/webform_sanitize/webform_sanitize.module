<?php

/**
 * @file
 * Contains cqc_okta_auth.module.
 */

/**
 * Method to trigger sanitization of webform items based on configuration.
 */
function webform_sanitize_trigger_sanitization($webform_id_param = NULL) {
  $config = \Drupal::config('webform.webform_sanitize.settings');
  // For each of the forms we want sanitized:
  foreach ($config->getRawData() as $webform_id => $element) {
    if ($webform_id_param != NULL && $webform_id_param != $webform_id) {
      continue;
    }
    // For each of the elements we want sanitized:
    foreach ($element as $elementId => $params) {
      // Get the sanitized value and perform the sanitization.
      $sanitizedValue = webform_sanitize_get_value($params);
      webform_perform_sanitization($webform_id, $elementId, $sanitizedValue);
    }
    drupal_set_message(t('Sanitized webform @id', ['@id' => $webform_id]));
  }
  drupal_set_message(t('Webform Sanitization complete.'));
}

/**
 * Method to perform an SQL query to sanitize a Webform submission item.
 */
function webform_perform_sanitization($webform_id, $name, $new_value) {
  \Drupal::database()->update('webform_submission_data')
    ->condition(
           'webform_id', $webform_id
         )
    ->condition(
          'name', $name
        )
    ->fields([
      'value' => $new_value,
    ])->execute();

}

/**
 * Method to return value to set webform item to based on configuration.
 *
 * Todo, add a hook to allow modules to alter this.
 *
 * @param array $params
 *   The parameters to use to work out the value.
 *
 * @return string
 *   The string to set the value as.
 */
function webform_sanitize_get_value(array $params) {
  if (empty($params['sanitizer'])) {
    return '';
  }
  switch ($params['sanitizer']) {
    case 'lorem':
      return webform_sanitize_get_lorem_string((int) $params['lorem']);

    case 'user_short':
      return $params['user_short'];

    case 'user_long':
      return $params['user_long'];

    default:
      return '';
  }
}

/**
 * Method to get Lorem Ipsum text to a specified length.
 *
 * Uses the loripsum API to return paragraphs of lorem ipsum text.
 *
 * @param int $charCount
 *   The number of characters of Lorem text to return.
 *
 * @return string
 *   The string or Lorem text.
 */
function webform_sanitize_get_lorem_string($charCount) {
  // Call the API to get a paragraph of lorem text.
  $string = \Drupal::httpClient()->get('http://loripsum.net/api/1/long/plaintext')->getBody();

  // If is not long enough, call the API again and append until it is.
  while (strlen($string) < $charCount) {
    $string .= ' ' . \Drupal::httpClient()->get('http://loripsum.net/api/1/long/plaintext')->getBody();
  }

  // Return the desired string length.
  return substr($string, 0, $charCount);

}
