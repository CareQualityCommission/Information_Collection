<?php

/**
 * @file
 * Contains user_sanitize.module.
 */

use Drupal\user\Entity\User;
use Drupal\Component\Utility\Random;

/**
 * Method to perform user sanitization.
 */
function user_sanitize_trigger_sanitization($from_drush = FALSE) {
  $applied_settings = [];
  $config = \Drupal::config('user_sanitize.settings');

  // Get our settings from the form.
  foreach ($config->getRawData() as $settingId => $setting) {
    $applied_settings[$settingId] = $setting;
  }

  // Array of roles NOT to sanitize.
  $excluded_roles = empty($applied_settings['settings']['exclusion']['excluded_roles']) ? [] : $applied_settings['settings']['exclusion']['excluded_roles'];
  // Array of uids NOT to sanitize.
  $excluded_uids = empty($applied_settings['settings']['exclusion']['excluded_ids']) ? [] : str_getcsv($applied_settings['settings']['exclusion']['excluded_ids']);

  // Get all the user ids in the sysem.
  $users = \Drupal::entityQuery('user')->execute();

  // For each user id (uid):
  foreach ($users as $userId) {
    // Skip uid 1, and any users that should be excluded.
    if (in_array($userId, $excluded_uids) || $userId <= 1) {
      continue;
    }

    // Get the user object,.
    $user = User::load($userId);

    // Skip users with excluded roles.
    if (!empty(array_intersect($user->getRoles(), $excluded_roles))) {
      continue;
    }

    // If we get to this point we want to sanitize this user.
    // For each field for the user:
    foreach ($applied_settings['fields'] as $field => $fieldSetting) {
      // Skip any field we don't want to sanitize.
      if ($fieldSetting['enabled'] != TRUE) {
        continue;
      }
      // If we get to this point, we want to sanitize this field.
      // Get the value to set this field to.
      $newValue = user_sanitize_calculate_value($fieldSetting['params']);

      // Drupal specific fields (name, pass, email) need to be set with
      // specific functions, other fields can be set using the set function.
      switch ($field) {
        case 'name':
          $user->setUsername($newValue);
          break;

        case 'pass':
          $user->setPassword($newValue);
          break;

        case 'mail':
          $user->setEmail($newValue);
          break;

        default:
          $user->set($field, $newValue);
          break;
      }

    }
    if ($from_drush) {
      drush_print(t('Sanitizing user uid @uid', ['@uid' => $userId]));
    }
    \Drupal::logger('user_sanitize')->info(t('Sanitizing user uid @uid', ['@uid' => $userId]));

    // Now that the object has changed, it needs saving.
    $user->save();
  }
}

/**
 * Method to get a sanitization value.
 */
function user_sanitize_calculate_value($params) {
  $randomiser = new Random();
  $value = '';

  // Depending on the time of sanitizer used, get the value from Drupal's
  // random class.
  switch ($params['sanitizer']) {
    case 'name':
      $value = $randomiser->name();
      break;

    case 'word':
      $value = $randomiser->word((int) $params['word_count']);
      break;

    case 'sentence':
      $value = $randomiser->word((int) $params['sentence_count']);
      break;
  }

  // Convert to lowercase if required.
  if ($params['lowercase'] == TRUE) {
    $value = strtolower($value);
  }

  // Add the suffix if specified.
  if ($params['suffix'] == TRUE) {
    $value .= $params['suffix_text'];
  }

  return $value;

}
